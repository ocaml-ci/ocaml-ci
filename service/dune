(library
 (name ocaml_ci_service)
 (public_name ocaml-ci-service)
 (libraries
  logs.fmt
  logs.cli
  fmt.tty
  fmt.cli
  current
  current_web
  current_docker
  current_git
  current_github
  current_rpc
  dockerfile-opam
  ocluster-api
  capnp-rpc-unix
  mirage-crypto-rng.unix
  ocaml_ci
  ocaml-ci-api
  prometheus-app.unix)
 (preprocess
  (pps ppx_deriving_yojson))
 (modules api_impl conf github pipeline))

(executables
 (names main local)
 (libraries
  logs.fmt
  logs.cli
  fmt.tty
  fmt.cli
  current
  current_web
  current_docker
  current_git
  current_github
  current_rpc
  dockerfile-opam
  ocluster-api
  capnp-rpc-unix
  mirage-crypto-rng.unix
  ocaml-ci
  ocaml-ci-api
  ocaml_ci_service
  prometheus-app.unix)
 (preprocess
  (pps ppx_deriving_yojson))
 (modules main local))

; This is a hack to work around https://github.com/ocaml/dune/issues/3499
; We first build the binaries, then copy them to a new name, then install them.
; This allows us to add in the run-time dependency on ocaml-ci-solver in the
; copy step.

(install
 (section bin)
 (package ocaml-ci-service)
 (files
  (main-copy.exe as ocaml-ci-service)))

(install
 (section bin)
 (package ocaml-ci-service)
 (files
  (local-copy.exe as ocaml-ci-local)))

(rule
 (target main-copy.exe)
 (deps
  (package solver-service))
 (action
  (copy main.exe main-copy.exe)))

(rule
 (target local-copy.exe)
 (deps
  (package solver-service))
 (action
  (copy local.exe local-copy.exe)))
